JS

'=' recebe
= null - nulo

let - variavel

nome de variável = identificador
- pode começar com letra, $, _
- não pode começar com número
- pode usar letras ou números
- pode usar acentos e símbolos
- não pode conter espaços
- não pode usar palavras reservadas

+ = concatenação

// number + number adição
// number + string concatenação

para transformar string em number:
Number.parseInt(n)
Number.parseFloat(n)
Number(n)

para transformar number em string:
String(n)
n.toString()

ex: s = 'JavaScript'
s.lenght //qtos caracteres a string tem
s.toUpperCase() //todas maiúsculas
s.toLowerCase() //todas minúsculas

Formatar números
var n1 = 1545.5

n1.toFixed(2) = 1545.50
n1.toFixed(2).replace(".", ",") = 1545,50
n1.toLacaleString('pt-BR', {style: 'currency', currency: 'BRL'})

-----------------------------------------------------------

ordem precedência
()
**
*, /, % (se tiver mais que um, vai da esquerda p/ a direita)
+, - (se tiver mais que um, vai da esquerda p/ a direita)

Operadores 

Atribuição
var a = 5 + 3 (8)
var b = a % 5 (3)
var c = 5 * b ** 2 (45)
var d = 10 - a / 2 (6)
var e = 6 * 2 / d (2)
var f = b % e + 4 / e (3)

Auto Atribuição
var n = 3 (3)
altera o valor       simplificando
n = n + 4 (7)           n += 4
n = n - 5 (2)           n -= 5
n = n * 4 (8)           n *= 4
n = n / 2 (4)           n /= 2
n = n ** 2 (16)         n **= 2
n = n % 5 (1)           n %= 5

Incremento
var x = 5
x = x + 1   ->   x++ (6)
x = x - 1   ->   x-- (4)

Relacionais (resultado sempre booleano)
>
<
>=
<=
== (igual)
!= (diferente)

*qdo tem aritméticos e relacionais, primeiro faz os aritméticos

Identidade
5 == 5    true
5 == '5'  true -> mesmo valor
5 === '5' false -> mesmo valor e mesmo tipo
5 === 5   true

== igual
=== identico

Lógicos
!   negação
&&  conjunção (e)
||  disjunção (ou)

!true  -> false
!false -> true

&&
true  && true  -> true
true  && false -> false
false && true  -> false
false && false -> false

||
true  || true  -> true
true  || false -> true
false || true  -> true
false || false -> false

*qdo tem vários a ordem é aritméticos, relacionais e lógicos
* ordem !, &&, ||

Ternário
? :
teste ? true : false
ex: média >= 7.0 ? "Aprovado" : "Reprovado"

-------------------------------------------------------------

DOM
Document Object Model (modelo de objetos para documentos)
Conjunto de objetos dentro do navegador que dá acesso aos componentes internos do site

Árvore DOM
         window (janela do navegador)
      /     |    \
location document history (objetos)
            |
           html (parent)
         /      \
    head          body (child)
    /  \        /  | |  \
meta   title   h1  p p  div
                     |
                   strong


Selecionando os elementos à partir de métodos:

- Marca 
getElementsByTagName()
seleciona mais de 1 objeto "[]"

- ID
getElementById()

- nome
getElementsByName()
seleciona mais de 1 objeto "[]"

- Classe
getElementsByClassName()
seleciona mais de 1 objeto "[]"

- Seletor
querySelector()
querySelectorAll()


*toda div é representada por #
*toda class é representada por .


Eventos DOM
Tudo o que pode acontecer
podem ser configurados na parte do html o JavaScript

ex html:
<div id="area" onclick="clicar()" onmouseenter="entrar()" onmouseout="sair()">

Exs:
- Eventos de mouse
    mouseenter
    mousemove
    mousedown
    mouseup
    click
    mouseout
    etc..

Função ou funcionalidade
Conjunto de códigos (ou linhas) que serão executadas
só quando o evento acontecer

1 passo:
colocar dentro de um bloco {}
e nomear como uma function antes do bloco
para que o método possa funcionar precisar dar um nome - nome()
opcionalmente dentro dos () pode passar parametros

ex: 
function ação() {

}

-----------------------------------------------------

Condições

if (condição) {
    true
} else {
    false
}

*Tipos de condição*

Condição simples           Condição Composta
if (condição) {            if (condição) {       
    true                       true
}                          } else {
                               false
                           }


Condições Aninhadas
(uma condição dentro da outra)
if (condição 1) {
    bloco 1
} else {
    if (condição) {
        bloco 2
    } else {
        bloco 3
    }
}


Condição Multipla
(possibilidade de valores fixos)

Testa a expressão
Só funciona com números inteiros e caracteres

switch (expressão) {
    case valor 1:
        bloco 1
        break (sempre obrigatório no final de cada case)
    case valor 2:
        bloco 2
        break (sempre obrigatório no final de cada case)
    case valor 3:
        bloco 3
        break (sempre obrigatório no final de cada case)
    default:
}

---------------------------------------------------

Repetições
Começa no primeiro comando passando por todos para concluir a tarefa

function comerPizza() {
    comerFatia()
    comerFatia()
    comerFatia()
    comerFatia()
    comerFatia()
    comerFatia()
    comerFatia()
    comerFatia()
}

*Sequência*
começa do primeiro ponto e vai até o último em sequência
A -> B -> c

*Repetições*

Laços
Enquanto a condição for verdadeira, passa por ela, faz um looping e volta para o começo e testa novamente
Quando for negativa passa direto e não entra na condição

Tipos:
Estrutura de repetição com teste lógico no início
Primeiro testa, depois executa o bloco
function comerPizza() {
    while (condição()) {
        comerFatia()
    }
}

Estrutura de repetição com teste lógico no final
Primeiro executa o bloco, depois testa
do {

} while (condição) {

}


Estrurura de repetição com variável de controle
Inicia, faz o teste lógico, se for verdadeiro, executa o bloco, volta e incrementa
(enquanto for verdadeiro, acontece o looping)
Quando for falso, encerra

for (início; teste; Incremento) {
    
}

-------------------------------------------------------

Variáveis Compostas
Capaz de armazenar vários valores em uma mesma estrutura
(Não perde um valor ao armazenar outro)

declara uma variável composta (array, vetor)
que é composto por elementos 
que é composto por valor e chame de identificação

ex:
let num = [5, 8, 2]

Para acrescentar valor
num[5] = 6

Para acrescentar na última posição
num.push(7)

Para saber o tamanho
num.length 
(length não é método, é atributo)

Para colocar os elementos em ordem crescente
num.sort()

Código tradicional:
for(let pos = 0; pos < num.length; pos++){
    console.log(num[pos])
}

Código simplificado:
for(let pos (índice) in num (nome da variável commposta)){ -> p/ cada posição em num
    console.log(num[pos]) -> mostra num[pos]
}


Buscar valores dentro do vetor
num.indexOf(7) -> procura no vetor onde está o valor 7

ex:
let pos = num.indexOf(8)
console.log(`O valor está na posição ${pos}`)

quando retorna -1:
significa que pesquisou e não encontrou nenhuma ocorrência dentro do vetor


------------------------------------------------------------

Funções
São ações executadas assim que são chamadas ou em decorrência de um evento
Uma funnção pode receber parâmetros e retornar um resoltado

Toda função precisa ter:
uma chamada
e pode ter:
conjunto Parâmetro (de entrada)
uma Ação
um retorno

function ação(param) {
    return resultado -> retorno / -> ação (todo o bloco)
}
ação(5) -> chamada

ex:
function parimp(n) {
    if(n % 2 == 0){
        return 'par'
    } else {
        return 'ímpar'
    }
}
let res = parimp(11) -> chamada com parâmetro

